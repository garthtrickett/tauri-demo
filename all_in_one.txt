===== src-tauri/src/main.rs =====
// src-tauri/src/main.rs

#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

use tauri::State;
use serde::Serialize;

#[derive(Serialize)]
struct Response {
  title: String,
}

#[tauri::command]
fn update_title(new_title: String) -> Response {
  // In a real app, you might update some internal state or perform other logic.
  // Here, we simply return the new title in a Response struct.
  Response { title: new_title }
}

fn main() {
  tauri::Builder::default()
    .invoke_handler(tauri::generate_handler![update_title])
    .run(tauri::generate_context!())
    .expect("error while running tauri application");
}



===== src/main.ts =====
import { html, render } from "lit-html";

import { invoke } from "@tauri-apps/api/core";

const state = { title: "Hello, Tauri!" };

const updateTitle = async () => {
  state.title = await invoke("update_title", { newTitle: "New Title" });
  renderApp();
};

const renderApp = () => {
  render(
    html`
      <h1>${state.title}</h1>
      <button @click=${updateTitle}>Change Title</button>
    `,
    document.getElementById("app")!,
  );
};

renderApp();



===== index.html =====
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tauri App</title>
    <script type="module" src="/src/main.ts"></script>
  </head>
  <body>
    <div id="app"></div>
  </body>
</html>



